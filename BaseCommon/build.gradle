apply plugin: 'com.android.library'
//apply plugin: 'com.github.dcendents.android-maven'

android {
    compileSdkVersion 28

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    }

    packagingOptions {
        exclude 'META-INF/proguard/com.app.basecommon.base.IBasePresenter.pro'
    }


    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }



}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

//    implementation 'com.android.support:appcompat-v7:28.0.0'
//    testImplementation 'junit:junit:4.12'
//    androidTestImplementation 'com.android.support.test:runner:1.0.2'
//    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    implementation 'com.google.android.material:material:1.0.0-alpha1'
    testImplementation deps.junit
    androidTestImplementation deps.espresso.core
    androidTestImplementation deps.atsl.runner

    api deps.support.app_compat
    api deps.support.v4
    api deps.support.design

    // Architecture components
    api deps.lifecycle.runtime
    api deps.lifecycle.extensions
    api deps.constraintlayout
    annotationProcessor deps.lifecycle.compiler
    api deps.room.runtime
    annotationProcessor deps.room.compiler
    api deps.paging_ktx

    api deps.RViewAdapterHelper
    api deps.SmartRefreshLayout

    //Http lib
    api deps.retrofit.runtime
    api deps.retrofit.gson
    api deps.retrofit.mock
    implementation deps.okhttp_logging_interceptor
    api deps.retrofit2_adapter_rxjava2
    api deps.rxjava2
    api deps.rx_android
}
//apply plugin: 'maven'
//ext {
//    // 从Github上clone下来的项目的本地地址
//    GITHUB_REPO_PATH = "E:\\MavenDir\\AppBaseCommon"       //这里指定的就是刚刚新建项目后clone下来的在本地的路径
//    PUBLISH_GROUP_ID = 'com.app.basecommon'
//    PUBLISH_ARTIFACT_ID = 'basecommons'
//    PUBLISH_VERSION = '1.0.1'
//}
//
//uploadArchives {
//    repositories.mavenDeployer {
//        def deployPath = file(project.GITHUB_REPO_PATH)
//        repository(url: "file://${deployPath.absolutePath}")
//        pom.project {
//            groupId project.PUBLISH_GROUP_ID
//            artifactId project.PUBLISH_ARTIFACT_ID
//            version project.PUBLISH_VERSION
//        }
//    }
//}
//
//
//// 源代码一起打包
//task androidSourcesJar(type: Jar) {
//    classifier = 'sources'
//    from android.sourceSets.main.java.sourceFiles
//}
//artifacts {
//    archives androidSourcesJar
//}
//configure(subprojects) {
//    println("--------start--------")
//    java.lang.String name = it.name
//    task copyAAR(type: Copy) {
//        from 'build/outputs/aar/' + name + '.aar'
//        into '../aars'
//    }
////    pom.project
//    pom.withXml {
//        def dependenciesNode = asNode().appendNode('dependencies')
//        println("--------dependenciesNode-----------:" + dependenciesNode)
//        configurations.implementation.allDependencies.withType(ModuleDependency) { ModuleDependency dp ->
//            println("--------dp.version-----------:" + dp.version)
//            if (dp.version != "unspecified") { // 过滤项目内library引用
//
//                def dependencyNode = dependenciesNode.appendNode('dependency')
//                println("--------Node-----------:" + dependencyNode)
//                dependencyNode.appendNode('groupId', dp.group)
//                dependencyNode.appendNode('artifactId', dp.name)
//                dependencyNode.appendNode('version', dp.version)
//
//                // for exclusions
//                if (dp.excludeRules.size() > 0) {
//                    def exclusions = dependencyNode.appendNode('exclusions')
//                    dp.excludeRules.each { ExcludeRule ex ->
//                        def exclusion = exclusions.appendNode('exclusion')
//                        exclusion.appendNode('groupId', ex.group)
//                        exclusion.appendNode('artifactId', ex.module)
//                    }
//                }
//            }
//        }
//    }
//    println("--------end--------")
//}
